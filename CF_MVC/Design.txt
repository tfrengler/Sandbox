In order to incorporate this in an existing project:

- You need the folder structure:
-- views/
-- controllers/
-- MVC/

- These things from Application.cfc:
-- The mappings
-- onApplicationStart()
-- onRequest()

------------------------------------------FLOW?

Request comes in...
- for a certain resource (action)
- using a certain method (GET, HEAD, POST etc)
- with certain headers
- with a certain query (URL-params)
- and a certain body (FORM-scope)

That request is resolved by...
- determining the controller and (optionally) item from the action
- calling the item on the controller

The controller typically...
- generates a response
- fills the response with the relevant data for the resource it represents (HTML or JSON)
- returns the response

A response consists of...
- a set of headers
- a statuscode
- a body (the return data in string form)

------------------------------------------FOLDERS:

MVC/
- The folder with all the MVC framework components
Views/
- One subfolder level, per "section"
- Represent a complete HTML templates, either on its own or with modules
Modules/
- Any amount of subfolders
- Represent modularized HTML templates, used within views
Controllers/
- No subfolders
- CFC's represent the section part of the URL-param action = "?action=section.item"

abstract: BaseController
{
    private services: ServiceLocator
    private MVC: MVC
    public init(ServiceLocator, MVC)
    public abstract default(RequestContext): ResponseContext
}

ExampleController: BaseController
{
    public default(RequestContext): ResponseContext
}

MVC: {
    ResolveRequest(headers, URL, FORM): ResponseContext
    {
        var controller, item = ResolveAction(URL.action);
        var Response = invoke(controller, item, RequestContext);
        return Response;
    }

    public ResolveAction(string action): struct<controller, action>
    public RenderModule(path, data): string
    public RenderView(path, data): string

    public OnMissingView(RequestContext)
    public OnMissingModule(RequestContext)
    public OnMissingControllerOrItem(RequestContext)
}

RenderXXX(path, data)
{
    var Output = "";
    cfsavecontent(variable="Output"){ cfmodule(path, data) };
    return Output;
}

--------------------------EXTRAS

EventManager
{
    subscribe()
    unsubscribe()
    trigger()
    dispatch()
}

Subscriber()
{
    callback: function
    id: numeric
    context: ???
}

Event
{
    type: ???
    data: struct
    timestamp: dateTime
}